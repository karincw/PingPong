//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/01.Scripts/Utils/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""InGame"",
            ""id"": ""49f87b40-c255-4732-8a51-4bfdc7ea5a8d"",
            ""actions"": [
                {
                    ""name"": ""UpDown"",
                    ""type"": ""Value"",
                    ""id"": ""00a44b6d-2f26-4126-b02b-3b9680632e42"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""c9b11989-cb23-4538-b985-37bb16533cf2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WS"",
                    ""id"": ""00d5ea2d-2c18-4161-bb72-02cbb28d6649"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a55f4f2f-45ad-4f36-8751-61597a386927"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cb4fbbd7-4b32-4eb7-9fc7-f5ec0a555dc9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""72f3c3d4-8211-4b09-9714-b6739180889e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6d9cfb20-4339-4309-926b-00d6c47ceb83"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d7d4b126-c3d8-4dfa-b100-4641124ec501"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fe5f603e-3dbf-4609-bd5e-9f1cef772dca"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ba0ff18-04af-4ec8-ad8a-83f221999025"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LocalSecPlayer"",
            ""id"": ""9addec7f-ba5b-4031-adfd-a5693b2d13ed"",
            ""actions"": [
                {
                    ""name"": ""SecUpDown"",
                    ""type"": ""Value"",
                    ""id"": ""aa8560a0-1a8d-4039-94b1-0ea414b7e1f6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecEnter"",
                    ""type"": ""Button"",
                    ""id"": ""c5896ef5-714f-41cd-a2c1-53f0698efa34"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2a272c2a-abf2-4fbf-9688-52c1c2b281b7"",
                    ""path"": ""<Keyboard>/numpadPlus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecEnter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9d4e58b-250f-4eb7-b394-aaa918125ed9"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecEnter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""39d4d8cd-99dd-4a73-8c97-86f3afe2f21c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecUpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8c47bd63-836f-4fdb-bcfe-66e48656c5f3"",
                    ""path"": ""<Keyboard>/numpad8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""caed1801-9631-45ac-bcfc-eb906e6ae636"",
                    ""path"": ""<Keyboard>/numpad5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // InGame
        m_InGame = asset.FindActionMap("InGame", throwIfNotFound: true);
        m_InGame_UpDown = m_InGame.FindAction("UpDown", throwIfNotFound: true);
        m_InGame_Enter = m_InGame.FindAction("Enter", throwIfNotFound: true);
        // LocalSecPlayer
        m_LocalSecPlayer = asset.FindActionMap("LocalSecPlayer", throwIfNotFound: true);
        m_LocalSecPlayer_SecUpDown = m_LocalSecPlayer.FindAction("SecUpDown", throwIfNotFound: true);
        m_LocalSecPlayer_SecEnter = m_LocalSecPlayer.FindAction("SecEnter", throwIfNotFound: true);
    }

    ~@Controls()
    {
        UnityEngine.Debug.Assert(!m_InGame.enabled, "This will cause a leak and performance issues, Controls.InGame.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_LocalSecPlayer.enabled, "This will cause a leak and performance issues, Controls.LocalSecPlayer.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InGame
    private readonly InputActionMap m_InGame;
    private List<IInGameActions> m_InGameActionsCallbackInterfaces = new List<IInGameActions>();
    private readonly InputAction m_InGame_UpDown;
    private readonly InputAction m_InGame_Enter;
    public struct InGameActions
    {
        private @Controls m_Wrapper;
        public InGameActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpDown => m_Wrapper.m_InGame_UpDown;
        public InputAction @Enter => m_Wrapper.m_InGame_Enter;
        public InputActionMap Get() { return m_Wrapper.m_InGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGameActions set) { return set.Get(); }
        public void AddCallbacks(IInGameActions instance)
        {
            if (instance == null || m_Wrapper.m_InGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InGameActionsCallbackInterfaces.Add(instance);
            @UpDown.started += instance.OnUpDown;
            @UpDown.performed += instance.OnUpDown;
            @UpDown.canceled += instance.OnUpDown;
            @Enter.started += instance.OnEnter;
            @Enter.performed += instance.OnEnter;
            @Enter.canceled += instance.OnEnter;
        }

        private void UnregisterCallbacks(IInGameActions instance)
        {
            @UpDown.started -= instance.OnUpDown;
            @UpDown.performed -= instance.OnUpDown;
            @UpDown.canceled -= instance.OnUpDown;
            @Enter.started -= instance.OnEnter;
            @Enter.performed -= instance.OnEnter;
            @Enter.canceled -= instance.OnEnter;
        }

        public void RemoveCallbacks(IInGameActions instance)
        {
            if (m_Wrapper.m_InGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInGameActions instance)
        {
            foreach (var item in m_Wrapper.m_InGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InGameActions @InGame => new InGameActions(this);

    // LocalSecPlayer
    private readonly InputActionMap m_LocalSecPlayer;
    private List<ILocalSecPlayerActions> m_LocalSecPlayerActionsCallbackInterfaces = new List<ILocalSecPlayerActions>();
    private readonly InputAction m_LocalSecPlayer_SecUpDown;
    private readonly InputAction m_LocalSecPlayer_SecEnter;
    public struct LocalSecPlayerActions
    {
        private @Controls m_Wrapper;
        public LocalSecPlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SecUpDown => m_Wrapper.m_LocalSecPlayer_SecUpDown;
        public InputAction @SecEnter => m_Wrapper.m_LocalSecPlayer_SecEnter;
        public InputActionMap Get() { return m_Wrapper.m_LocalSecPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LocalSecPlayerActions set) { return set.Get(); }
        public void AddCallbacks(ILocalSecPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_LocalSecPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LocalSecPlayerActionsCallbackInterfaces.Add(instance);
            @SecUpDown.started += instance.OnSecUpDown;
            @SecUpDown.performed += instance.OnSecUpDown;
            @SecUpDown.canceled += instance.OnSecUpDown;
            @SecEnter.started += instance.OnSecEnter;
            @SecEnter.performed += instance.OnSecEnter;
            @SecEnter.canceled += instance.OnSecEnter;
        }

        private void UnregisterCallbacks(ILocalSecPlayerActions instance)
        {
            @SecUpDown.started -= instance.OnSecUpDown;
            @SecUpDown.performed -= instance.OnSecUpDown;
            @SecUpDown.canceled -= instance.OnSecUpDown;
            @SecEnter.started -= instance.OnSecEnter;
            @SecEnter.performed -= instance.OnSecEnter;
            @SecEnter.canceled -= instance.OnSecEnter;
        }

        public void RemoveCallbacks(ILocalSecPlayerActions instance)
        {
            if (m_Wrapper.m_LocalSecPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILocalSecPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_LocalSecPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LocalSecPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LocalSecPlayerActions @LocalSecPlayer => new LocalSecPlayerActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IInGameActions
    {
        void OnUpDown(InputAction.CallbackContext context);
        void OnEnter(InputAction.CallbackContext context);
    }
    public interface ILocalSecPlayerActions
    {
        void OnSecUpDown(InputAction.CallbackContext context);
        void OnSecEnter(InputAction.CallbackContext context);
    }
}
